C51 COMPILER V9.52.0.0   SOFT_UART_1                                                       12/21/2017 11:02:11 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SOFT_UART_1
OBJECT MODULE PLACED IN .\Objects\soft_uart_1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE USER\UART\soft_uart_1.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\project
                    -;.\USER\BUZZER;.\USER\charge;.\USER\common;.\USER\DC_MOTOR;.\USER\EEPROM;.\USER\EXINT;.\USER\IIC;.\USER\inc;.\USER\ION;.
                    -\USER\M26;.\USER\PWM;.\USER\Sensor;.\USER\step_motor;.\USER\SYS_RUN;.\USER\timer;.\USER\TM1620;.\USER\touch_key;.\USER\U
                    -ART;.\USER\UV;.\USER\LVI) DEBUG OBJECTEXTEND PRINT(.\Listings\soft_uart_1.lst) TABS(2) OBJECT(.\Objects\soft_uart_1.obj)

line level    source

   1          #include "OB39R32T1.h"
   2          #include "soft_uart.h"
   3          #include "global.h"
   4          #include "wifi_uart.h"
   5          #include "debug_uart.h"
   6          //#include "TM1618.h"
   7          /*
   8          //时钟周期 22.1184MHz
   9          1秒的机器周期为 22118400/12
  10          
  11          
  12          1ms的需要的机器周期为 22118.4/12
  13          22118.4/12 = 1843.2(0x0733)
  14          65536 - 1843 = 43418（0xF8CD）
  15          
  16          0.5ms需要的机器周期为 22118.4/12/2 = 921.6
  17          65536 - 921  = 64615(0xFC67)
  18          
  19          0.25ms需要的机器周期为 22118.4/12/2/2 = 460.8
  20          65536 - 461  = 65075(0xFE33)
  21          
  22          0.1ms需要的机器周期为 22118.4/12/10 = 184.32
  23          65536 - 184  = 65352(0xFF48)
  24          
  25          0.05ms = 50us 需要的机器周期为 22118.4/12/10/2 = 92.16
  26          65536 - 92  = 65444(0xFFA4)
  27          
  28          104.17us = 0.10417ms 需要的机器周期为 (22118.4/12)/(1/0.10417) = 192 对应的波特率 9600
  29          TMIER1采用模式2,8bit- autoreload模式 TH1 = 256 - 192 = 64 
  30          
  31          34.7us = 0.0347ms 需要的机器周期为 (22118.4/12)/(1/0.0347) = 63.96 = 64  对应的波特率为 9600*3
  32          TMIER1采用模式2,8bit- autoreload模式 TH1 = 256 - 64 = 192 
  33          */
  34          
  35          //定时器为104.17us时 U2RxRate_bk = 1；定时器为34.7s时 U2RxRate_bk = 3；
  36          static unsigned char U2RxRate_bk = 0;
  37          static unsigned char U2TxRate_bk = 0;
  38          #ifdef DEBUG_UART_RX
              static unsigned char U3RxRate_bk = 0;
              #endif
  41          static unsigned char U3TxRate_bk = 0;
  42          
  43          #define d_T0MOD    0x20
  44          #define d_T0_TH0   192
  45          
  46          void Timer0_Init(void)
  47          {
  48   1          ET0 = 1;
  49   1          TMOD  |= d_T0MOD;
  50   1          TH0   = d_T0_TH0;  //MODE1 16bit
  51   1          //TL0   = d_T0_TL0;
  52   1          EA   = 1;
C51 COMPILER V9.52.0.0   SOFT_UART_1                                                       12/21/2017 11:02:11 PAGE 2   

  53   1          TR0  = 1;
  54   1      }
  55          
  56          void Soft_UART_Init(void)
  57          {
  58   1          Timer0_Init();
  59   1        
  60   1      #ifdef WIFI_SOFT_IIC
                  U2RxRate_bk = 3;
                  U2TxRate_bk = 3;
              #endif
  64   1      
  65   1      #ifdef DEBUG_UART_RX  
                  U3RxRate_bk = 3;
              #endif
  68   1          U3TxRate_bk = 3;
  69   1      }
  70          
  71          
  72          
  73          
  74          
  75          /*********************
  76          High priority interupt
  77          TIMER1  34.7us timer, 9600*3 bps
  78          中断函数内部勿使用耗时的函数，否则模拟UART的发送和接收比特率会出问题
  79          ******************/
  80          void TIMER0_ISR(void) interrupt d_T0_Vector
  81          { 
  82   1      #ifdef WIFI_SOFT_IIC
                  static unsigned char U2RxBitCount = 0;
                  static unsigned char U2RxBuf = 0;
                  static unsigned char U2TxBuf = 0;
                  static unsigned char U2RxRate = 0;
              #endif
  88   1        
  89   1      #ifdef DEBUG_UART_RX 
                  static unsigned char U3RxBitCount = 0;
                  static unsigned char U3RxBuf = 0;
                  static unsigned char U3RxRate = 0;
              #endif  
  94   1          static unsigned char U3TxBuf = 0;
  95   1      
  96   1       /*模拟 UART2函数*/   
  97   1      #ifdef WIFI_SOFT_IIC 
                // Rx
                if(U2RxPtr < U2RxBuff_MAXSIZE)
                {
                  if(U2RxBitCount)
                  {
                    if(!--U2RxRate)
                    {
                      //用两个判断 U2RxBitCount==9,此处是延时一个停止位
                      if(U2RxBitCount == 9)
                      {
                        U2RxBitCount = 0;   //stop Rxing
                        U2RxBuffer[U2RxPtr++] = U2RxBuf;
                        U2RxBuf = 0;
                        //U2RxRate = U2RxRate_bk;
                        IsU2RxBusy = 0;
                        
                      }
C51 COMPILER V9.52.0.0   SOFT_UART_1                                                       12/21/2017 11:02:11 PAGE 3   

                      else
                      {
                        U2RxRate = U2RxRate_bk;
                        if(U2RxPin)
                        {
                            U2RxBuf |= (1 << 7);
                        }
                        else
                        { 
                            U2RxBuf &= ~(1 << 7);
                        }
                        
                        U2RxBitCount++;
                        if(U2RxBitCount == 9)
                        {
                            U2RxRate = U2RxRate_bk;
                            return;
                        }
                        U2RxBuf >>= 1;          
                      }
                    }
                  }
                  else
                  {
                    if(!U2RxPin)
                    {
                      U2RxBitCount = 1;   //start Rx
                      U2RxRate = U2RxRate_bk + 1;
                      IsU2RxBusy = 1;
                    }
                  }  
                }
              
                
                
                //to initiate a Tx, just write the U8 data to U2TxBuf,and set U2TxBitCount = 10 ,U2TxRate set to 3
                //first check if it's Txing (if U2TxBitCount != 0), 
              
                
                if(U2TxBitCount){
                  if(!--U2TxRate){
                    U2TxRate = U2TxRate_bk;
                    //
                    switch(U2TxBitCount --){
                      case 1:   //Stop bit; send next byte
                        U2TxPin = 1;
                        if(U2TxPtr != U2LdPtr){
                          U2TxBuf = U2TxBuffer[U2TxPtr ++];
                          U2TxBitCount = 10;
                        }
                        else{
                          U2TxPtr = 0;
                          U2LdPtr = 0;
                          IsU2TxBusy = 0;
                        }
                      break;
              
                      case 10:  //Start bit
                        IsU2TxBusy = 1;
                        U2TxPin = 0;
                        if(U2TxPtr == 0)
                        {
C51 COMPILER V9.52.0.0   SOFT_UART_1                                                       12/21/2017 11:02:11 PAGE 4   

                          U2TxBuf = U2TxBuffer[U2TxPtr ++];
                        }
                      break;
                      
                      default:
                        //U2TxPin = U2TxBuf & 0XFE;
                        U2TxPin = U2TxBuf & 0x01;
                        U2TxBuf >>= 1;
                      break;
              
                    }
                  }
                } 
               #endif
 191   1        
 192   1      
 193   1      /*模拟 UART3函数*/  
 194   1        // Rx
 195   1      #ifdef DEBUG_UART_RX
                if(U3RxPtr < U3RxBuff_MAXSIZE)
                {
                  if(U3RxBitCount)
                  {
                    if(!--U3RxRate)
                    {
                      //用两个判断 U2RxBitCount==9,此处是延时一个停止位
                      if(U3RxBitCount == 9)
                      {
                        U3RxBitCount = 0;   //stop Rxing
                        U3RxBuffer[U3RxPtr++] = U3RxBuf;
                        U3RxBuf = 0;
                        IsU3RxBusy = 0;
                        
                      }
                      else
                      {
                        U3RxRate = U3RxRate_bk;
                        if(U3RxPin)
                        {
                            U3RxBuf |= (1 << 7);
                        }
                        else
                        { 
                            U3RxBuf &= ~(1 << 7);
                        }
                        
                        U3RxBitCount++;
                        if(U3RxBitCount == 9)
                        {
                            return;
                        }
                        U3RxBuf >>= 1;          
                      }
                    }
                  }
                  else
                  {
                    if(!U3RxPin)
                    {
                      U3RxBitCount = 1;   //start Rx
                      U3RxRate = U3RxRate_bk + 1;
                      IsU3RxBusy = 1;
C51 COMPILER V9.52.0.0   SOFT_UART_1                                                       12/21/2017 11:02:11 PAGE 5   

                    }
                  }  
                }
              #endif
 243   1        
 244   1       
 245   1        
 246   1        //to initiate a Tx, just write the U8 data to U2TxBuf,and set U2TxBitCount = 10 ,U2TxRate set to 3
 247   1        //first check if it's Txing (if U2TxBitCount != 0), 
 248   1      
 249   1        
 250   1        if(U3TxBitCount){
 251   2          if(!--U3TxRate){
 252   3            U3TxRate = U3TxRate_bk;
 253   3            //
 254   3            switch(U3TxBitCount --){
 255   4              case 1:   //Stop bit; send next byte
 256   4                U3TxPin = 1;
 257   4                if(U3TxPtr != U3LdPtr){
 258   5                  U3TxBuf = U3TxBuffer[U3TxPtr ++];
 259   5                  U3TxBitCount = 10;
 260   5                }
 261   4                else{
 262   5                  U3TxPtr = 0;
 263   5                  U3LdPtr = 0;
 264   5                  IsU3TxBusy = 0;
 265   5                }
 266   4              break;
 267   4      
 268   4              case 10:  //Start bit
 269   4                IsU3TxBusy = 1;
 270   4                U3TxPin = 0;
 271   4                if(U3TxPtr == 0)
 272   4                {
 273   5                  U3TxBuf = U3TxBuffer[U3TxPtr ++];
 274   5                }
 275   4              break;
 276   4              
 277   4              default:
 278   4                U3TxPin = U3TxBuf & 0x01;
 279   4                U3TxBuf >>= 1;
 280   4              break;
 281   4      
 282   4            }
 283   3          }
 284   2        }   
 285   1        
 286   1        
 287   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    185    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
