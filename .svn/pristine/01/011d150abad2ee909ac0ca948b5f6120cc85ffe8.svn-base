package com.yjyz.iot.sms.aliyun;

import org.springframework.beans.factory.annotation.Value;

import com.aliyuncs.DefaultAcsClient;
import com.aliyuncs.IAcsClient;
import com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;
import com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;
import com.aliyuncs.exceptions.ClientException;
import com.aliyuncs.http.MethodType;
import com.aliyuncs.profile.DefaultProfile;
import com.aliyuncs.profile.IClientProfile;
import com.yjyz.iot.sms.ISendSMS;
import com.yjyz.iot.sms.SMSResult;

public class SendSMS implements ISendSMS {
	@Value("${sms.aliyun.url}")
	private String url;
	@Value("${sms.aliyun.appKey}")
	private String appKey;
	@Value("${sms.aliyun.secret}")
	private String secret;
	@Value("${sms.aliyun.signName}")
	private String signName;
	@Value("${sms.aliyun.verCodeTemplateCode}")
	private String verCodeTemplateCode;
	@Value("${sms.aliyun.alermTemplateCode}")
	private String alermTemplateCode;
	@Value("${sms.aliyun.messageTemplateCode}")
	private String messageTemplateCode;

	final String product = "Dysmsapi";
	SendSmsRequest request;
	IAcsClient acsClient;

	public static final String APPKEY = "LTAIQaG0GL0cLi9I";
	public static final String SECRET = "spBIw75Nzrnt9go0g4mepn9ORUR8mt";

	public SendSMS() {
		System.setProperty("sun.net.client.defaultConnectTimeout", "10000");
		System.setProperty("sun.net.client.defaultReadTimeout", "10000");
		request = new SendSmsRequest();
		IClientProfile profile = DefaultProfile.getProfile("cn-hangzhou", APPKEY, SECRET);
		acsClient = new DefaultAcsClient(profile);
	}

	@Override
	public SMSResult send(String tel, String verCode) {
		try {
			DefaultProfile.addEndpoint("cn-hangzhou", "cn-hangzhou", product, url);
			request.setMethod(MethodType.POST);
			request.setPhoneNumbers(tel);
			request.setSignName(signName);
			request.setTemplateCode(verCodeTemplateCode);
			request.setTemplateParam("{\"code\":\"" + verCode + "\"}");
			SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);
			if (sendSmsResponse.getCode() != null && sendSmsResponse.getCode().equals("OK")) {
				return new SMSResult("aliyun", "0", sendSmsResponse.getMessage());
			} else {
				return new SMSResult("aliyun", "-1", "SMS Server Error!");
			}

		} catch (ClientException e) {
			e.printStackTrace();
			return new SMSResult("aliyun", "-1", "SMS Server Error!");
		}

	}

	@Override
	public SMSResult sendDevAlerm(String tel, String devName) {
		try {
			DefaultProfile.addEndpoint("cn-hangzhou", "cn-hangzhou", product, url);
			request.setMethod(MethodType.POST);
			request.setPhoneNumbers(tel);
			request.setSignName(signName);
			request.setTemplateCode(alermTemplateCode);
			request.setTemplateParam("{\"devname\":\"" + devName + "\"}");
			SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);
			if (sendSmsResponse.getCode() != null && sendSmsResponse.getCode().equals("OK")) {
				return new SMSResult("aliyun", "0", sendSmsResponse.getMessage());
			} else {
				return new SMSResult("aliyun", "-1", "SMS Server Error!");
			}

		} catch (ClientException e) {
			e.printStackTrace();
			return new SMSResult("aliyun", "-1", "SMS Server Error!");
		}
	}

	@Override
	public SMSResult sendDevMessage(String tel, String devName, String message) {
		try {

			DefaultProfile.addEndpoint("cn-hangzhou", "cn-hangzhou", product, url);

			request.setMethod(MethodType.POST);
			request.setPhoneNumbers(tel);
			request.setSignName(signName);
			request.setTemplateCode(messageTemplateCode);
			request.setTemplateParam("{\"devname\":\"" + devName + "\", \"message\":\"" + message + "\"}");
			SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);
			if (sendSmsResponse.getCode() != null && sendSmsResponse.getCode().equals("OK")) {
				return new SMSResult("aliyun", "0", sendSmsResponse.getMessage());
			} else {
				return new SMSResult("aliyun", "-1", "SMS Server Error!");
			}

		} catch (ClientException e) {
			e.printStackTrace();
			return new SMSResult("aliyun", "-1", "SMS Server Error!");
		}
	}

	public static void main(String[] args) throws Exception {
		// 设置超时时间-可自行调整
		System.setProperty("sun.net.client.defaultConnectTimeout", "10000");
		System.setProperty("sun.net.client.defaultReadTimeout", "10000");
		// 初始化ascClient需要的几个参数
		final String product = "Dysmsapi";// 短信API产品名称（短信产品名固定，无需修改）
		final String domain = "dysmsapi.aliyuncs.com";// 短信API产品域名（接口地址固定，无需修改）
		// 替换成你的AK
		final String accessKeyId = "LTAIQaG0GL0cLi9I";// 你的accessKeyId,参考本文档步骤2
		final String accessKeySecret = "spBIw75Nzrnt9go0g4mepn9ORUR8mt";// 你的accessKeySecret，参考本文档步骤2
		// 初始化ascClient,暂时不支持多region（请勿修改）
		IClientProfile profile = DefaultProfile.getProfile("cn-hangzhou", accessKeyId, accessKeySecret);
		DefaultProfile.addEndpoint("cn-hangzhou", "cn-hangzhou", product, domain);
		IAcsClient acsClient = new DefaultAcsClient(profile);
		// 组装请求对象
		SendSmsRequest request = new SendSmsRequest();
		// 使用post提交
		request.setMethod(MethodType.POST);
		// 必填:待发送手机号。支持以逗号分隔的形式进行批量调用，批量上限为1000个手机号码,批量调用相对于单条调用及时性稍有延迟,验证码类型的短信推荐使用单条调用的方式
		request.setPhoneNumbers("13439966787");
		// 必填:短信签名-可在短信控制台中找到
		request.setSignName("易享云");
		// 必填:短信模板-可在短信控制台中找到
		request.setTemplateCode("SMS_132995237");
		// 可选:模板中的变量替换JSON串,如模板内容为"亲爱的${name},您的验证码为${code}"时,此处的值为
		// 友情提示:如果JSON中需要带换行符,请参照标准的JSON协议对换行符的要求,比如短信内容中包含\r\n的情况在JSON中需要表示成\\r\\n,否则会导致JSON在服务端解析失败
		request.setTemplateParam("{\"devname\":\"Tom\", \"message\":\"123\"}");
		// 可选-上行短信扩展码(扩展码字段控制在7位或以下，无特殊需求用户请忽略此字段)
		// request.setSmsUpExtendCode("90997");
		// 可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者
		request.setOutId("yourOutId");
		// 请求失败这里会抛ClientException异常
		SendSmsResponse sendSmsResponse;
		try {
			sendSmsResponse = acsClient.getAcsResponse(request);
			if (sendSmsResponse.getCode() != null && sendSmsResponse.getCode().equals("OK")) {

			}
			System.out.println(sendSmsResponse.getMessage());
		} catch (ClientException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
