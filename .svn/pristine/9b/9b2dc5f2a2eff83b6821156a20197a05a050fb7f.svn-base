package com.yjyz.iot.device.action;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.yjyz.iot.comm.ConstParm;
import com.yjyz.iot.comm.RetInfoDto;
import com.yjyz.iot.device.dto.DevExamDto;
import com.yjyz.iot.device.entity.DevExamDetail;
import com.yjyz.iot.device.entity.DevExamMain;
import com.yjyz.iot.device.service.IDevExamService;
import com.yjyz.iot.security.utils.ClientJwtToken;
import com.yjyz.iot.security.utils.ClientJwtUtil;

/**
 * @class :ExamController
 * @TODO :
 * @author:HeroLizhen
 * @date :2017年12月21日上午12:15:00
 */
@RestController
@RequestMapping("/device")
public class ExamController {

	@Autowired
	private IDevExamService devExamService;

	private static Log log = LogFactory.getLog(ExamController.class);

	@Autowired
	ClientJwtUtil jwtUtil;

	@Transactional
	@RequestMapping(value = "/startExam", method = RequestMethod.POST)
	public RetInfoDto startExam(@RequestBody DevExamDto dto, @RequestHeader String Authorization) {
		RetInfoDto info = new RetInfoDto();
		ClientJwtToken token;
		try {
			token = jwtUtil.parseToken(Authorization);
		} catch (Exception e) {
			info.meta.put("message", "access token is wrong!");
			info.meta.put("code", ConstParm.ERR_CODE_JWT);
			return info;
		}

		try {
			DevExamMain devExamMain = this.devExamService.startExam(dto, token.getUser_id());
			if (devExamMain == null) {
				info.meta.put("message", "no dvice for this MAC.");
				info.meta.put("code", ConstParm.ERR_NO_DEVINFO);
			} else {
				info.meta.put("code", ConstParm.SUCESS_CODE);
				info.data.put("data", devExamMain);
			}

		} catch (Exception e) {
			log.error(e);
			info.meta.put("message", "startExam fail.");
			info.meta.put("code", ConstParm.ERR_EXAM_STARTEXAM);
		}
		return info;
	}

	@Transactional
	@RequestMapping(value = "/getExamResult", method = RequestMethod.POST)
	public RetInfoDto getExamResult(@RequestBody DevExamDto dto, @RequestHeader String Authorization) {
		RetInfoDto info = new RetInfoDto();
		try {
			jwtUtil.parseToken(Authorization);
		} catch (Exception e) {
			info.meta.put("message", "access token is wrong!");
			info.meta.put("code", ConstParm.ERR_CODE_JWT);
			return info;
		}

		try {
			List<DevExamDetail> examDetail = this.devExamService.getExamResult(dto);
			info.meta.put("code", ConstParm.SUCESS_CODE);
			info.data.put("data", examDetail);
		} catch (Exception e) {
			log.error(e);
			info.meta.put("message", "startExam fail.");
			info.meta.put("code", ConstParm.ERR_EXAM_GETEXAMRESULT);
		}
		return info;
	}

	@Transactional
	@RequestMapping(value = "/confirmExamResult", method = RequestMethod.POST)
	public RetInfoDto confirmExamResult(@RequestBody DevExamMain dto, @RequestHeader String Authorization) {
		RetInfoDto info = new RetInfoDto();
		try {
			jwtUtil.parseToken(Authorization);
		} catch (Exception e) {
			info.meta.put("message", "access token is wrong!");
			info.meta.put("code", ConstParm.ERR_CODE_JWT);
			return info;
		}

		try {
			boolean isOk = this.devExamService.updateExamMain(dto);
			info.meta.put("code", ConstParm.SUCESS_CODE);
			info.data.put("data", isOk);
		} catch (Exception e) {
			log.error(e);
			info.meta.put("message", "updateExamMain fail.");
			info.meta.put("code", ConstParm.ERR_EXAM_CONFIRMEXAMRESULT);
		}
		return info;
	}

	@RequestMapping(value = "/saveExamItem", method = RequestMethod.POST)
	public RetInfoDto saveExamItem(@RequestBody DevExamDto dto) {
		RetInfoDto info = new RetInfoDto();

		try {
			boolean isOk = this.devExamService.saveExamItem(dto);
			info.meta.put("code", ConstParm.SUCESS_CODE);
			info.data.put("data", isOk);
		} catch (Exception e) {
			log.error(e);
			info.meta.put("message", "saveExamItem fail.");
			info.meta.put("code", ConstParm.ERR_EXAM_SAVEEXAMITEM);
		}
		return info;
	}

	@RequestMapping(value = "/stopExam", method = RequestMethod.POST)
	public RetInfoDto stopExam(@RequestBody DevExamMain dto) {
		RetInfoDto info = new RetInfoDto();

		try {
			boolean isOk = this.devExamService.stopExam(dto);
			info.meta.put("code", ConstParm.SUCESS_CODE);
			info.data.put("data", isOk);
		} catch (Exception e) {
			log.error(e);
			info.meta.put("message", "saveExamItem fail.");
			info.meta.put("code", ConstParm.ERR_EXAM_STOPEXM);
		}
		return info;
	}

}
