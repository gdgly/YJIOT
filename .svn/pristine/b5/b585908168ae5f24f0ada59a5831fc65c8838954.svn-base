package com.yjyz.iot.ota.service.impl;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.yjyz.iot.ota.dao.OTAFileInfoMapper;
import com.yjyz.iot.ota.entity.OTAFileInfo;
import com.yjyz.iot.ota.service.IOTAFileService;
import com.yjyz.iot.ota.util.MD5Util;
/** 
 * @calss :OTAFileServiceImpl
 * @TODO  :
 * @author:HeroLizhen
 * @date  :2017年11月28日上午10:35:34
 */
@Service("otaFileService")
public class OTAFileServiceImpl implements IOTAFileService {

	@Resource
	OTAFileInfoMapper OTAFileInfoDao;
	@Value("${cfg.sys.otafile.filePathl}")
	private String OTAFILEPATH;

	@Override
	public List<OTAFileInfo> selectByProduceId(String produceId) throws Exception {
		return this.OTAFileInfoDao.selectByProductId(produceId);
	}

	@Override
	public boolean deleteByPrimaryKey(Integer id) throws Exception {
		int ret = this.OTAFileInfoDao.deleteByPrimaryKey(id);
		if (ret == 1) {
			return true;
		} else {
			return false;
		}
	}

	@Override
	public OTAFileInfo insert(OTAFileInfo record, MultipartFile file) throws Exception {
		
		String fileName = "/" + file.getOriginalFilename();
		File tempFile = new File(OTAFILEPATH);
		if (!tempFile.exists()) {
			tempFile.mkdirs();
		}
		tempFile = new File(OTAFILEPATH + fileName);
		BufferedOutputStream buff = new BufferedOutputStream(new FileOutputStream(tempFile));
		buff.write(file.getBytes());
		buff.close();
		String uploadMd5Code = MD5Util.getFileMD5String(tempFile);
		record.setMd5(uploadMd5Code);
		int maxId = this.OTAFileInfoDao.getOTAFileInofMaxId();
		record.setId(maxId + 1);
		record.setOtaId(UUID.randomUUID().toString());
		int ret = this.OTAFileInfoDao.insertSelective(record);
		if (ret == 1) {
			return record;
		} else {
			return null;
		}

	}

	@Override
	public boolean updateByPrimaryKey(OTAFileInfo record) throws Exception {
		int ret = this.OTAFileInfoDao.updateByPrimaryKeySelective(record);
		if (ret == 1) {
			return true;
		} else {
			return false;
		}
	}

	@Override
	public OTAFileInfo selectByPrimaryKey(Integer id) throws Exception {
		return this.OTAFileInfoDao.selectByPrimaryKey(id);
	}
}
