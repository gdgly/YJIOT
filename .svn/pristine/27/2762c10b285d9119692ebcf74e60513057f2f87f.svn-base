package com.yjyz.iot.security.action;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.yjyz.iot.comm.ConstParm;
import com.yjyz.iot.comm.RetInfoDto;
import com.yjyz.iot.device.entity.DeviceInfo;
import com.yjyz.iot.security.dto.UserDevCommDto;
import com.yjyz.iot.security.entity.PowAppInfo;
import com.yjyz.iot.security.entity.PowClientUser;
import com.yjyz.iot.security.entity.PowSysUser;
import com.yjyz.iot.security.entity.PowUserDev;
import com.yjyz.iot.security.service.IClientPowerService;
import com.yjyz.iot.security.service.IPowerService;
import com.yjyz.iot.security.utils.BASE64Util;
import com.yjyz.iot.security.utils.ClientJwtToken;
import com.yjyz.iot.security.utils.ClientJwtUtil;
import com.yjyz.iot.security.utils.MD5Util;
import com.yjyz.iot.sms.SMSResult;

@RestController
@RequestMapping("/power")
public class PowerController {
	@Autowired
	private IPowerService powerService;
	@Autowired
	ClientJwtUtil jwtUtil;
	@Autowired
	MD5Util md5Util;
	@Autowired
	BASE64Util base64Util;

	private static Log log = LogFactory.getLog(PowerController.class);

	@Transactional
	@RequestMapping(value = "/getToken", method = RequestMethod.POST)
	public RetInfoDto getToken(@RequestBody UserDevCommDto dto) {
		RetInfoDto info = new RetInfoDto();

		try {
			if (!md5Util.MD5(dto.getAppId()).equals(dto.getKey())) {
				info.meta.put("code", ConstParm.ERR_SECURITY_CLIENT_VERCODE_KEY);
				return info;
			}
			PowSysUser sysUser = new PowSysUser();
			sysUser.setAppid(dto.getAppId());
			sysUser.setUsername(dto.getUserName());
			PowSysUser user = this.powerService.selSysUser(sysUser);
			ClientJwtToken jwtToken = new ClientJwtToken(user.getUsername(), user.getAppid());
			String token = jwtUtil.createJWT(jwtToken);
			info.meta.put("code", ConstParm.SUCESS_CODE);
			info.data.put("token", token);
			return info;
		} catch (Exception e) {
			log.error(e);
			info.meta.put("message", "get Token fail.");
			info.meta.put("code", ConstParm.ERR_CODE_JWT);
			return info;
		}
	}


	@Transactional
	@RequestMapping(value = "/addApp", method = RequestMethod.POST)
	public RetInfoDto addApp(@RequestBody PowAppInfo dto, @RequestHeader String Authorization) {
		RetInfoDto info = new RetInfoDto();
		ClientJwtToken jwtToken;
		try {
			jwtToken = jwtUtil.parseToken(Authorization);
		} catch (Exception e) {
			info.meta.put("message", "access token is wrong!");
			info.meta.put("code", ConstParm.ERR_CODE_JWT);
			return info;
		}
		try {
			PowAppInfo appInfo = this.powerService.addApp(dto);		
			if (appInfo == null) {
				info.meta.put("code", ConstParm.SUCESS_CODE);
			} else {
				info.meta.put("code", ConstParm.ERR_SECURITY_CLIENT_UPDATEUSER);
			}
		} catch (Exception e) {
			log.error(e);
			info.meta.put("code", e.getMessage());
		}
		return info;
	}
	
	
}
