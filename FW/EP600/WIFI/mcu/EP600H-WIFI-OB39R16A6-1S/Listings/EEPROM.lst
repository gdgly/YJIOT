C51 COMPILER V9.52.0.0   EEPROM                                                            09/15/2017 16:15:56 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\EEPROM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE USER\EEPROM\EEPROM.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\USER\IIC;.\
                    -USER\UART;.\USER\TM1618;.\USER\Sensor;.\USER;.\USER\PWM;.\USER\DC_MOTOR;.\USER\timer;.\USER\inc;.\USER\EXINT;.\USER\touc
                    -h_key;.\USER\SYS_RUN;.\USER\step_motor;.\USER\BUZZER;.\USER\UART;.\USER\common;.\USER\lib;.\USER\UV;.\USER\ION;.\USER\EE
                    -PROM;.\USER\TM1620;.\USER\charge) DEBUG OBJECTEXTEND PRINT(.\Listings\EEPROM.lst) TABS(2) OBJECT(.\Objects\EEPROM.obj)

line level    source

   1          #include "OB39R16A6.h"
   2          #include <absacc.h>    /* Include Macro Definitions */
   3          #include "EEPROM.h"
   4          
   5          /*ISPFC.ISPF[2:0]*/
   6          #define d_Command_Byte_Program  0
   7          #define d_Command_Page_Erase    2
   8          #define d_EEPROM_Start_Addr     0x3D
   9          
  10          //====================================================================
  11          #define d_DATALEN   64              // idata limit:1~128
  12          unsigned char idata buf[d_DATALEN]; // idata limit:1~128
  13          
  14          void Software_Reset(void)
  15          {
  16   1          EA    = 0;
  17   1          TAKEY = 0x55;
  18   1          TAKEY = 0xAA;
  19   1          TAKEY = 0x5A;
  20   1          SWRES = 0xFF;
  21   1      }
  22          
  23          void Check_ISPFAH(void)
  24          {
  25   1          if(ISPFAH<d_EEPROM_Start_Addr)
  26   1              Software_Reset();
  27   1      }
  28          
  29          void EEPROM_Enable(void)
  30          {
  31   1          EA     = 0;
  32   1          TAKEY  = 0x55;
  33   1          TAKEY  = 0xAA;
  34   1          TAKEY  = 0x5A;
  35   1          IFCON |= 0x01;      // ISPE=1, Enable ISP function
  36   1          EA     = 1;
  37   1      }
  38          
  39          void EEPROM_Disable(void)
  40          {
  41   1          EA     = 0;
  42   1          TAKEY  = 0x55;
  43   1          TAKEY  = 0xAA;
  44   1          TAKEY  = 0x5A;
  45   1          IFCON &= 0xFE;      // ISPE=0, Disable  ISP function
  46   1          EA     = 1;
  47   1      }
  48          
  49          void EEPROM_Byte_Program(unsigned int Addr, unsigned char Data)
  50          {
  51   1          EEPROM_Enable();
  52   1          ISPFD  = Data;
C51 COMPILER V9.52.0.0   EEPROM                                                            09/15/2017 16:15:56 PAGE 2   

  53   1          ISPFAH = (Addr/256);
  54   1          ISPFAL = (Addr%256);
  55   1          if (ISPFAH >= d_EEPROM_Start_Addr)
  56   1              ISPFC = d_Command_Byte_Program; 
  57   1          else
  58   1              Software_Reset();
  59   1          EEPROM_Disable();
  60   1      }
  61          
  62          void EEPROM_Page_Erase(unsigned int Addr)       // erase 128-Byte
  63          {
  64   1          EEPROM_Enable();
  65   1          ISPFAH = (Addr/256);
  66   1          ISPFAL = (Addr%256);
  67   1          if (ISPFAH >= d_EEPROM_Start_Addr)
  68   1              ISPFC = d_Command_Page_Erase; 
  69   1          else
  70   1              Software_Reset();
  71   1          EEPROM_Disable();
  72   1      }
  73          
  74          void EEPROM_Sector_Program(unsigned int Addr_start, unsigned int Addr_end, unsigned char Data)
  75          {
  76   1          unsigned int i;
  77   1          for (i = Addr_start; i <= Addr_end; i++)
  78   1          {
  79   2              EEPROM_Byte_Program(i, Data);
  80   2          }
  81   1      }
  82          
  83          unsigned char EEPROM_Byte_Read(unsigned int Addr)
  84          {
  85   1      //    unsigned char res = 0;
  86   1      //    EEPROM_Enable();
  87   1      //    res = CBYTE[Addr];
  88   1      //    EEPROM_Disable();
  89   1      //    return res;
  90   1        
  91   1          return CBYTE[Addr];         //The range of valid index values for this macro is 0-255
  92   1      }
  93          
  94          /*unsigned int EEPROM_Word_Read(unsigned int Addr)
  95          {
  96              return CWORD[Addr];         //The range of valid index values for this macro is 0-65535
  97          }*/
  98          
  99          void EEPROM_Byte_Modify(unsigned int Addr, unsigned char Data)
 100              {
 101   1          unsigned char i;
 102   1          
 103   1          for (i = 0; i < d_DATALEN; i++)
 104   1              buf[i] = EEPROM_Byte_Read((Addr&0xFF00)+i);     // page read
 105   1      
 106   1          EEPROM_Page_Erase(Addr);                            // erase page 
 107   1          
 108   1          buf[(unsigned char)Addr] = Data;                    // byte modify
 109   1      
 110   1          for (i = 0; i < d_DATALEN; i++)
 111   1              EEPROM_Byte_Program((Addr&0xFF00)+i, buf[i]);   // page program
 112   1      }


C51 COMPILER V9.52.0.0   EEPROM                                                            09/15/2017 16:15:56 PAGE 3   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    285    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     64    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
